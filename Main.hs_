{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE BangPatterns #-}

module Main where
import Reflex.Dom (run)
import Reflex.Dom.Core hiding (Click,Drop)
import GoogleMapsReflex
import GHCJS.DOM.Types (JSM)
import Data.Functor
import Data.Map
import Data.Text (pack)
main :: IO ()
main = do
  run $ mapsApp 

mapsApp :: JSM ()
mapsApp = mainWidget (exampleMapsWidget)

exampleMapsWidget :: MonadWidget t m => m ()
exampleMapsWidget = do
  pb <- getPostBuild >>= delay 0.1 --wait rendering
  configDyn <- holdDyn config (pb $> config)

  --Make the dom element for the map
  (Element _ mapEl, _) <- elAttr' "div" ("style" =: "width: 500px; height: 300px;") blank

  --Create the widget
  maps <- googleMaps mapEl (ApiKey "AIzaSyAXn2V4wLK1QeU6YEFBFCApDQBPyajr8d0") configDyn

  --Get the click event on the map
  mc <- mapEvent Click maps 

  d <- holdDyn "" (const "Clicked" <$> mc)
  el "div" $ dynText d
  return ()


config :: Config Int
config = def {
  _config_markers = fromList $ zipWith mkMarkerOption (zipWith (,) [0..9] [0..9]) [0..9]
}

mkMarkerOption :: (Double,Double) -> Int -> (Int, MarkerOptions)
mkMarkerOption (a,b) i = (i, def {
  _markerOptions_position = LatLng a b,
  _markerOptions_title = pack $ "number " ++ show i,
  _markerOptions_animation = Just Drop
})
{-
(0, def {
  _markerOptions_position = LatLng 0 0,
  _markerOptions_title = "name",
  _markerOptions_animation = Just Drop
})]}
-}
